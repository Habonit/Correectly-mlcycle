version: "3.8"

services:
  postgres:
    image: pgvector/pgvector:0.8.0-pg17
    container_name: postgres
    ports:
      - "${POSTGRES_PORT}:5432"
    env_file:
      - .env
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/01_init.sql
      - ./postgres/entrypoint.sh:/docker-entrypoint-initdb.d/02_grant.sh
      - ./:${PROJECT_PATH}
    networks:
      train-server:
        aliases:
          - db
        ipv4_address: ${POSTGRES_IP}

  airflow:
    image: custom-airflow:latest
    build:
      context: .
      dockerfile: airflow/Dockerfile
      args:
        PROJECT_PATH: ${PROJECT_PATH}
        VENV_PATH: ${VENV_PATH}
    container_name: airflow
    restart: unless-stopped
    depends_on:
      - postgres
    env_file:
      - .env
    environment:
      AIRFLOW_ROLE: webserver
      PYTHONPATH: ${PROJECT_PATH}
    volumes:
      - ./airflow/entrypoint.sh:${PROJECT_PATH}/airflow/entrypoint.sh
      - ./:${PROJECT_PATH}
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "${AIRFLOW_PORT}:8080"
    networks:
      train-server:
        aliases:
          - airflow
        ipv4_address: ${AIRFLOW_IP}

  airflow_scheduler:
    image: custom-airflow:latest
    build:
      context: .
      dockerfile: airflow/Dockerfile
      args:
        PROJECT_PATH: ${PROJECT_PATH}
        VENV_PATH: ${VENV_PATH}
    container_name: airflow_scheduler
    depends_on:
      - airflow
    env_file:
      - .env
    environment:
      AIRFLOW_ROLE: scheduler
      PYTHONPATH: ${PROJECT_PATH}
    volumes:
      - ./airflow/entrypoint.sh:${PROJECT_PATH}/airflow/entrypoint.sh
      - ./:${PROJECT_PATH}
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      train-server:
        aliases:
          - scheduler
        ipv4_address: ${SCHEDULER_IP}

  mlflow:
    image: custom-mlflow:latest
    build:
      context: .
      dockerfile: mlflow/Dockerfile
      args:
        PROJECT_PATH: ${PROJECT_PATH}
        VENV_PATH: ${VENV_PATH}
    container_name: mlflow
    restart: unless-stopped
    depends_on:
      - postgres
    env_file:
      - .env
    environment:
      PYTHONPATH: ${PROJECT_PATH}
    volumes:
      - ./:${PROJECT_PATH}
    ports:
      - "${MLFLOW_PORT}:5000"
    networks:
      train-server:
        aliases:
          - mlflow
        ipv4_address: ${MLFLOW_IP}

volumes:
  pgdata:

networks:
  train-server:
    name: train-server
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: ${SUBNET}
